name: Deploy to ECR

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPO }} # set this to your Amazon ECR repository name
  ECS_SERVICE: frontend_service # set this to your Amazon ECS service name
  ECS_CLUSTER: MyEcsCluster # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION:
    ./.aws/task-definition.json # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    transition_frontend # set this to the name of the container in the
    # containerDefinitions section of your task definition
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: ${{ secrets.ECR_REPO }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set essential login AWS details to configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create production env file
        run: |
          cd ${{ github.workspace }}
          # Create production environment files
          echo "REACT_APP_JWT_APP_SECRET=${{ secrets.JWT_APP_SECRET }}" > my-app/.env
          echo "REACT_APP_BASE_URL=${{ secrets.BASE_URL }}" >> my-app/.env

      - name: Notify start deploying process
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_MESSAGE: "Start the building process :rocket:"
          SLACK_TITLE: Build Start

      - name: Build and tag the Docker images
        working-directory: ./my-app
        run: |
          docker build -t transition_app .

      - name: Login in ECS
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Tag Docker image
        run: |
          docker tag transition_app ${{ env.ECR_REPOSITORY }}/transition_website:transition_frontend_${{ github.sha }}

      - name: Push Docker image to ECR Public
        run: |
          docker push ${{ env.ECR_REPOSITORY }}/transition_website:transition_frontend_${{ github.sha }}

      #
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REPOSITORY }}/transition_website:transition_frontend_${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Notify in slack when deployed into steady state
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_MESSAGE: "sucessfully deployed onto ecs service and a steady state :rocket:"
          SLACK_TITLE: Success
